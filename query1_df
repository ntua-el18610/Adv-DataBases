from pyspark.sql import SparkSession
import time

# Initialize SparkSession
spark = SparkSession \
    .builder \
    .appName("Crime Filter") \
    .config("spark.executor.instances", "4") \
    .config("spark.executor.cores", "2") \
    .config("spark.executor.memory", "4g") \
    .getOrCreate()

# Start timing
start_time = time.time()

# Load the data into DataFrames
victims19 = spark.read.csv(
    "s3://initial-notebook-data-bucket-dblab-905418150721/CrimeData/Crime_Data_from_2010_to_2019_20241101.csv",
    header=True, inferSchema=True
)
victims_current = spark.read.csv(
    "s3://initial-notebook-data-bucket-dblab-905418150721/CrimeData/Crime_Data_from_2020_to_Present_20241101.csv",
    header=True, inferSchema=True
)

# Combine the DataFrames
all_victims = victims19.union(victims_current)

# Filter rows containing "AGGRAVATED ASSAULT" in the column 'Crm Cd Desc'
filtered_data_df = all_victims.filter(all_victims['Crm Cd Desc'].rlike("(?i)AGGRAVATED ASSAULT")& 
    (all_victims['Vict Age'] > 0)
)


# Sort the filtered data based on age )
sorted_data_df = filtered_data_df.orderBy(filtered_data_df['Vict Age'].cast("int"))

# Split the data into age groups
under_18_df = sorted_data_df.filter(sorted_data_df['Vict Age'] < 18)
age_18_to_24_df = sorted_data_df.filter((sorted_data_df['Vict Age'] >= 18) & (sorted_data_df['Vict Age'] <= 24))
age_25_to_64_df = sorted_data_df.filter((sorted_data_df['Vict Age'] >= 25) & (sorted_data_df['Vict Age'] <= 64))
above_64_df = sorted_data_df.filter(sorted_data_df['Vict Age'] > 64)

# Show results for each group with selected columns
print("Under 18:")
under_18_df.select("Vict Age", "Vict Sex", "Crm Cd Desc").show(20,truncate = False)

print("\n18 to 24:")
age_18_to_24_df.select("Vict Age", "Vict Sex", "Crm Cd Desc").show(20,truncate = False)

print("\n25 to 64:")
age_25_to_64_df.select("Vict Age", "Vict Sex", "Crm Cd Desc").show(20,truncate = False)

print("\nAbove 64:")
above_64_df.select("Vict Age", "Vict Sex", "Crm Cd Desc").show(20,truncate = False)

# Stop timing and print out the execution duration
end_time = time.time()
elapsed_time = end_time - start_time
print(f"Time taken: {elapsed_time:.2f} seconds")
